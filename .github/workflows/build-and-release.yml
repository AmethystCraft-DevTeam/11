# .github/workflows/build-and-release.yml
name: Build and Release Electron App (Win/Linux)

on:
  push:
    tags:
      - 'v*.*.*' # 只有当你推送 v1.0.0, v2.3.4 等格式的 Tag 时，才会触发发布流程
  workflow_dispatch:

# ⭐ 关键修改1：添加权限声明
permissions:
  contents: write # 授予写入 contents（包括 Releases）的权限
  # issues: write # 如果Release需要关联Issue，可以加上
  # pull-requests: write # 如果Release需要关联PR，可以加上

jobs:
  # ⭐ 新增：Windows 平台构建任务
  build-windows:
    name: Build for Windows
    runs-on: windows-latest # 在最新的 Windows 系统上运行

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build Windows App
        # 确保你的 package.json 中 'electron:build' 命令能识别并构建 Windows 目标
        # 通常 npm run electron:build 默认会构建当前操作系统的目标
        run: npm run electron:build -- -w # 或者确保 package.json 里有 "build": { "win": {} } 配置
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 传给 electron-builder，如果需要签名或自动更新

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: win-build # Windows 构建产物命名为 win-build
          path: dist/ # electron-builder 的 Windows 产物通常在 dist/ 目录下

  # ⭐ 新增：Linux 平台构建任务（可以保留之前的配置）
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest # 在最新的 Ubuntu 系统上运行

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build Linux App
        # 确保你的 package.json 中 'electron:build' 命令能识别并构建 Linux 目标
        run: npm run electron:build -- -l # 或者确保 package.json 里有 "build": { "linux": {} } 配置
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 传给 electron-builder，如果需要签名或自动更新

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build # Linux 构建产物命名为 linux-build
          path: dist/ # electron-builder 的 Linux 产物通常在 dist/ 目录下


  release:
    name: Create GitHub Release and Upload Assets
    # ⭐ 关键修改2：确保依赖于所有构建任务
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: win-build # 下载 Windows 构建产物
          path: dist_electron/ # 放到 dist_electron/ 目录

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-build # 下载 Linux 构建产物
          path: dist_electron/ # 也放到 dist_electron/ 目录，它们会合并在一起

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          # ⭐ 根据 electron-builder 实际输出的文件名和路径进行微调
          files: |
            dist_electron/*.exe
            dist_electron/*.zip # 如果你构建了便携版或其他压缩包
            dist_electron/*.AppImage
            dist_electron/*.deb
            dist_electron/*.rpm
            dist_electron/*.yml # for latest.yml, latest-linux.yml (更新服务器用)
            dist_electron/*.blockmap # for differential updates
